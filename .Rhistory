ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
geom_point() +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700, renderer = gifski_renderer("animation/LE_animation.gif",loop=T)) +
#anim_save("animation/LE_animation.gif")
}
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
geom_point() +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700, renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
#anim_save("animation/LE_animation.gif")
}
anim(LE1990)
require("ggplot2")
# Plot#1, showing mortality by age groups
yearlyData <- yearlyDeathsByGroups(A2021)
ggplot(yearlyData, aes(Age, R)) + geom_bar(stat = "identity") +
labs(title = "2020 Deaths", x = "Age group", y = "Deaths") +
ggsave("plots/plot#1.png", width = 13, height = 7)
# Plot#2, showing weekly mortality for specific years
test <- data.frame()
for (year in 2019:2021) {
varName <- paste("A", year, sep = '')
test <- rbind(test, weeklyDeaths(get(varName), year))
}
Weeks <- factor(test$Week, labels = 1:53)
ggplot(test, aes(x = Weeks, y = Deaths,
group = Year, color = Year)) +
geom_line(size = 3) + ylim(0, max(test$Deaths)) +
ggsave("plots/plot#2.png", width = 13, height = 7)
# Plot#3, map
data <- yearlyDeathsByRegions(A2021)
# mapa testy
#install.packages(c("ggplot2", "sf", "rnaturalearth", "rnaturalearthdata",
"googleway", "ggrepel", "libwgeom", "rnaturalearthhires"))
#devtools::install_github("ropensci/rnaturalearthhires")
library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rnaturalearthhires")
#install.packages("devtools")
library("devtools")
theme_set(theme_bw())
PolandMapData <- ne_countries(scale = "medium", country = "Poland",
returnclass = "sf")
States <- ne_states(country = "Poland", returnclass = "sf")
#link
#https://ggplot2.tidyverse.org/reference/scale_viridis.html
#https://r-spatial.org/r/2018/10/25/ggplot2-sf-2.html
ggplot(data = PolandMapData) +
geom_sf() +
geom_sf(data = States, aes(fill = data$Deaths)) +
scale_fill_viridis_c(alpha = 1, begin = 0, end = 1, direction = -1,
option = "D", values = NULL, space = "Lab",
guide = "colourbar", aesthetics = "colour") +
coord_sf(xlim = c(13,25), ylim = c(48.75, 55), expand = F) +
ggsave("plots/plot#3.png", width = 7, height = 7)
#install.packages("gganimate")
library(gganimate)
#install.packages("hrbrthemes")
library(hrbrthemes)
library(tidyverse)
#install.packages("gifski")
library(gifski)
#install.packages("gif")
library(gif)
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
geom_point() +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700,
renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
}
require("ggplot2")
# Plot#1, showing mortality by age groups
yearlyData <- yearlyDeathsByGroups(A2021)
ggplot(yearlyData, aes(Age, R)) + geom_bar(stat = "identity") +
labs(title = "2020 Deaths", x = "Age group", y = "Deaths") +
ggsave("plots/plot#1.png", width = 13, height = 7)
# Plot#2, showing weekly mortality for specific years
test <- data.frame()
for (year in 2019:2021) {
varName <- paste("A", year, sep = '')
test <- rbind(test, weeklyDeaths(get(varName), year))
}
Weeks <- factor(test$Week, labels = 1:53)
ggplot(test, aes(x = Weeks, y = Deaths,
group = Year, color = Year)) +
geom_line(size = 3) + ylim(0, max(test$Deaths)) +
ggsave("plots/plot#2.png", width = 13, height = 7)
# Plot#3, map
data <- yearlyDeathsByRegions(A2021)
# mapa testy
#install.packages(c("ggplot2", "sf", "rnaturalearth", "rnaturalearthdata",
#"googleway", "ggrepel", "libwgeom", "rnaturalearthhires"))
#devtools::install_github("ropensci/rnaturalearthhires")
library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rnaturalearthhires")
#install.packages("devtools")
library("devtools")
theme_set(theme_bw())
PolandMapData <- ne_countries(scale = "medium", country = "Poland",
returnclass = "sf")
States <- ne_states(country = "Poland", returnclass = "sf")
#link
#https://ggplot2.tidyverse.org/reference/scale_viridis.html
#https://r-spatial.org/r/2018/10/25/ggplot2-sf-2.html
ggplot(data = PolandMapData) +
geom_sf() +
geom_sf(data = States, aes(fill = data$Deaths)) +
scale_fill_viridis_c(alpha = 1, begin = 0, end = 1, direction = -1,
option = "D", values = NULL, space = "Lab",
guide = "colourbar", aesthetics = "colour") +
coord_sf(xlim = c(13,25), ylim = c(48.75, 55), expand = F) +
ggsave("plots/plot#3.png", width = 7, height = 7)
#install.packages("gganimate")
library(gganimate)
#install.packages("hrbrthemes")
library(hrbrthemes)
library(tidyverse)
#install.packages("gifski")
library(gifski)
#install.packages("gif")
library(gif)
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
geom_point() +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700,
renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
}
loadData <- function(genders = "A", years = 2000:2021) {
require("readxl")
for (year in years) {
for (gender in genders) {
# A - all, M - male, F - female
if (gender == "A")      sheetPage <- 1
else if (gender == "M") sheetPage <- 2
else if (gender == "W") sheetPage <- 3
# From 105-106th row, data is more specific
mData <- data.frame(
read_excel(
path = paste("data/", year, ".xlsx", sep = ''),
sheet = sheetPage,
skip = if (year > 2019) 105 else 106,
.name_repair = "minimal"
)
)
columns <- dim(mData)[2]
if (columns <= 55) {
for (week in (columns+1):56)
mData <- cbind(mData, tempT = NA)
}
names(mData) <- c("Age", "RegionCode", "Region",
paste("T", 1:(length(mData) - 3), sep = ''))
varName <- paste(gender, year, sep = '')
rows <- dim(mData)[1]
if (rows == 1862) {
assign(varName, mData, envir = globalenv())
message(varName, " loaded!")
} else {
warning(1862 - rows, " rows are missing in ", varName, " variable!")
}
}
}
}
loadLifeExpect <- function(yrs = 1990:2019){
require("readxl")
for (yr in yrs){
leData <- data.frame(
read_excel(
path = "data/tablice_trwania_zycia_1990-2019.xls",
sheet = yr,
skip = 3,
)
)
colnames(leData) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
name <- paste("LE",yr,sep= '')
assign(name, leData, envir = globalenv())
message(name, " loaded!")
}
}
loadLifeExpect("2006")
# 1 - Country, 2 - Macroregion
# 3 - Region, 4 - Subregion
getByRegions <- function(m_data, choice = 1) {
regions <- m_data[nchar(m_data$RegionCode) == choice + 1,]
return(regions)
}
weeklyDeaths <- function(m_data, year) {
m_data <- getByRegions(m_data)
weeklyData <- colSums(m_data[4:length(m_data)])
weeklyData <- data.frame(Week = names(weeklyData),
Deaths = weeklyData,
row.names = NULL)
weeklyData <- cbind(Year = year, weeklyData)
weeklyData
weeklyData$Year <- as.factor(weeklyData$Year)
weeklyData$Week <- factor(weeklyData$Week, levels = weeklyData$Week)
return(weeklyData)
}
weeklyDeathsByGroups <- function(m_data) {
m_data <- getByRegions(m_data)
groupsData <- m_data[c(1, 4:length(m_data))]
groupsData$Age <- factor(groupsData$Age, levels = groupsData$Age)
return(groupsData)
}
yearlyDeathsByGroups <- function(m_data) {
m_data <- getByRegions(m_data)
yearlyData <- m_data[1]
yearlyData <- cbind(yearlyData, "R" = rowSums(m_data[4:length(m_data)],
na.rm = T))
yearlyData$Age <- factor(yearlyData$Age, levels = yearlyData$Age)
return(yearlyData)
}
yearlyDeathsByRegions <- function(m_data) {
m_data <- getByRegions(m_data,3)
yearlyData <- m_data[3]
yearlyData <- cbind(yearlyData, "R" = rowSums(m_data[4:length(m_data)],
na.rm = T))
yearlyData <- yearlyData[yearlyData$Region != "Warszawski stoÅ‚eczny",]
yearlyData <- setNames(aggregate(yearlyData$R,
by = list(yearlyData$Region),
FUN = sum),
c("Region", "Deaths"))
yearlyData$Region <- factor(yearlyData$Region,
levels = yearlyData$Region)
return(yearlyData)
}
gendExp <- function(x){
x <- split(x,x$Sex)
feE <- as.data.frame(x[2])
colnames(feE) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
mE <- as.data.frame(x[1])
colnames(mE) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
assign("maleExp", mE, envir = globalenv())
message("maleExp"," loaded!")
assign("femaleExp", feE, envir = globalenv())
message("femaleExp"," loaded!")
}
gendExp(LE2006)
maleExp
femaleExp
LE2006
anim(LE2006)
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700,
renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
}
anim(LE2006)
loadData <- function(genders = "A", years = 2000:2021) {
require("readxl")
for (year in years) {
for (gender in genders) {
# A - all, M - male, F - female
if (gender == "A")      sheetPage <- 1
else if (gender == "M") sheetPage <- 2
else if (gender == "W") sheetPage <- 3
# From 105-106th row, data is more specific
mData <- data.frame(
read_excel(
path = paste("data/", year, ".xlsx", sep = ''),
sheet = sheetPage,
skip = if (year > 2019) 105 else 106,
.name_repair = "minimal"
)
)
columns <- dim(mData)[2]
if (columns <= 55) {
for (week in (columns+1):56)
mData <- cbind(mData, tempT = NA)
}
names(mData) <- c("Age", "RegionCode", "Region",
paste("T", 1:(length(mData) - 3), sep = ''))
varName <- paste(gender, year, sep = '')
rows <- dim(mData)[1]
if (rows == 1862) {
assign(varName, mData, envir = globalenv())
message(varName, " loaded!")
} else {
warning(1862 - rows, " rows are missing in ", varName, " variable!")
}
}
}
}
loadLifeExpect <- function(yrs = 1990:2019){
require("readxl")
for (yr in yrs){
leData <- data.frame(
read_excel(
path = "data/tablice_trwania_zycia_1990-2019.xls",
sheet = yr,
skip = 3,
)
)
colnames(leData) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
name <- paste("LE",yr,sep= '')
assign(name, leData, envir = globalenv())
message(name, " loaded!")
}
}
loadLifeExpect()
loadLifeExpect("")
loadLifeExpect <- function(yrs = 1990:2019){
require("readxl")
for (yr in yrs){
leData <- data.frame(
read_excel(
path = "data/tablice_trwania_zycia_1990-2019.xls",
sheet = yr,
skip = 3,
)
)
colnames(leData) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
name <- paste("LE",yr,sep= '')
assign(name, leData, envir = globalenv())
message(name, " loaded!")
}
}
loadlifeex
loadLifeExpect("2019")
LE2019
gendExp <- function(x){
x <- split(x,x$Sex)
feE <- as.data.frame(x[2])
colnames(feE) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
mE <- as.data.frame(x[1])
colnames(mE) <- c("Sex","Age","Number of survivors",
"Probability of death","Number of dead",
"Stationary population",
"Cumulated stationary population",
"Average life expectancy")
assign("maleExp", mE, envir = globalenv())
message("maleExp"," loaded!")
assign("femaleExp", feE, envir = globalenv())
message("femaleExp"," loaded!")
}
gendExp(LE2019)
maleExp
femaleExp
require("ggplot2")
# Plot#1, showing mortality by age groups
yearlyData <- yearlyDeathsByGroups(A2021)
ggplot(yearlyData, aes(Age, R)) + geom_bar(stat = "identity") +
labs(title = "2020 Deaths", x = "Age group", y = "Deaths") +
ggsave("plots/plot#1.png", width = 13, height = 7)
# Plot#2, showing weekly mortality for specific years
test <- data.frame()
for (year in 2019:2021) {
varName <- paste("A", year, sep = '')
test <- rbind(test, weeklyDeaths(get(varName), year))
}
Weeks <- factor(test$Week, labels = 1:53)
ggplot(test, aes(x = Weeks, y = Deaths,
group = Year, color = Year)) +
geom_line(size = 3) + ylim(0, max(test$Deaths)) +
ggsave("plots/plot#2.png", width = 13, height = 7)
# Plot#3, map
data <- yearlyDeathsByRegions(A2021)
# mapa testy
#install.packages(c("ggplot2", "sf", "rnaturalearth", "rnaturalearthdata",
#"googleway", "ggrepel", "libwgeom", "rnaturalearthhires"))
#devtools::install_github("ropensci/rnaturalearthhires")
library("ggplot2")
library("sf")
library("rnaturalearth")
library("rnaturalearthdata")
library("rnaturalearthhires")
#install.packages("devtools")
library("devtools")
theme_set(theme_bw())
PolandMapData <- ne_countries(scale = "medium", country = "Poland",
returnclass = "sf")
States <- ne_states(country = "Poland", returnclass = "sf")
#link
#https://ggplot2.tidyverse.org/reference/scale_viridis.html
#https://r-spatial.org/r/2018/10/25/ggplot2-sf-2.html
ggplot(data = PolandMapData) +
geom_sf() +
geom_sf(data = States, aes(fill = data$Deaths)) +
scale_fill_viridis_c(alpha = 1, begin = 0, end = 1, direction = -1,
option = "D", values = NULL, space = "Lab",
guide = "colourbar", aesthetics = "colour") +
coord_sf(xlim = c(13,25), ylim = c(48.75, 55), expand = F) +
ggsave("plots/plot#3.png", width = 7, height = 7)
#install.packages("gganimate")
library(gganimate)
#install.packages("hrbrthemes")
library(hrbrthemes)
library(tidyverse)
#install.packages("gifski")
library(gifski)
#install.packages("gif")
library(gif)
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700,
renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
}
anim <- function(x){
m <- as.factor(x$Sex)
levels(m) <- c("Male","Female")
p_LE <- x%>%
ggplot(aes(x=Age,y=`Probability of death`,group=Sex,color=m)) +
geom_line(size=1.5) + ylim(0, max(test$Deaths)) +
ggtitle("Probability of death animation") +
scale_color_viridis_d("Sex") +
theme_ipsum() +
ggsave("animation/LE_plot.png", width = 7, height = 7)
p_LE.animation = p_LE+
transition_reveal(Age)+
view_follow(fixed_y=T)
#saving animation
animate(p_LE.animation, duration = 3, fps = 8, width = 800, height = 700,
renderer = gifski_renderer("animation/LE_animation.gif",loop=T))
}
anim(LE2019)
